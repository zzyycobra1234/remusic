package com.wm.remusic.activity;


import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.TransitionDrawable;
import android.media.AudioManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.ParcelFileDescriptor;
import android.support.annotation.Nullable;
import android.support.v4.view.ViewPager;
import android.support.v7.app.ActionBar;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

import com.facebook.common.executors.CallerThreadExecutor;
import com.facebook.common.references.CloseableReference;
import com.facebook.datasource.DataSource;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.imagepipeline.core.ImagePipeline;
import com.facebook.imagepipeline.datasource.BaseBitmapDataSubscriber;
import com.facebook.imagepipeline.image.CloseableImage;
import com.facebook.imagepipeline.request.ImageRequest;
import com.facebook.imagepipeline.request.ImageRequestBuilder;
import com.wm.remusic.R;
import com.wm.remusic.fragment.PlayQueueFragment;
import com.wm.remusic.fragment.SimpleMoreFragment;
import com.wm.remusic.handler.HandlerUtil;
import com.wm.remusic.info.MusicInfo;
import com.wm.remusic.lrc.DefaultLrcParser;
import com.wm.remusic.lrc.LrcRow;
import com.wm.remusic.lrc.LrcView;
import com.wm.remusic.provider.PlaylistsManager;
import com.wm.remusic.request.UiMonitorActivity;
import com.wm.remusic.service.MediaService;
import com.wm.remusic.service.MusicPlayer;
import com.wm.remusic.uitl.IConstants;
import com.wm.remusic.uitl.ImageUtils;
import com.wm.remusic.uitl.L;
import com.wm.remusic.uitl.MusicUtils;
import com.wm.remusic.widget.AlbumViewPager;
import com.wm.remusic.widget.PagerAdapter;
import com.wm.remusic.widget.PlayerSeekBar;
import com.wm.remusic.widget.ReInterpolator;
import com.wm.remusic.widget.RoundView;
import com.wm.remusic.widget.RoundViewPager;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.ref.WeakReference;
import java.util.HashMap;
import java.util.List;

import static com.wm.remusic.service.MusicPlayer.getAlbumPath;


/**
 * Created by wm on 2016/2/21.
 */
public class PlayingActivity extends BaseActivity implements IConstants {
    private ImageView backAlbum, playingmode, control, next, pre, playlist, cmt, fav, down, more, needle;
    private TextView timePlayed, duration;
    private PlayerSeekBar mProgress;

    private ActionBar ab;
    private ObjectAnimator needleAnim;
    private AlbumViewPager mViewPager;
    private HashMap<Long, MusicInfo> musicInfos;
    private long[] plays;
    private int currentId;
    private BitmapFactory.Options newOpts;
    private PlaylistsManager playlistsManager;
    private boolean isFav = false;
    private boolean isNextOrPreSetPage = false; //判断viewpager由手动滑动 还是setcruuentitem换页
    private boolean duetoplaypause = false; //判读是否是播放暂停的通知，不要切换专辑封面
    private String[] albumPaths;
    private Toolbar toolbar;
    private FrameLayout albumLayout;
    private RelativeLayout lrcViewContainer;
    private LrcView mLrcView;
    private TextView tryGetLrc;
    private LinearLayout musicTool;
    private SeekBar mVolumeSeek;
    private Handler mHandler;
    MyMainPagerAdapter  mMainAdapter;
    private boolean print = true;
    private String TAG = PlayingActivity.class.getSimpleName();

    @Override
    protected void showQuickControl(boolean show) {
        //super.showOrHideQuickControl(show);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_playing);
        playlistsManager = PlaylistsManager.getInstance(this);
        musicInfos = MusicPlayer.getPlayinfos();
        plays = MusicPlayer.getQueue();
        currentId = MusicPlayer.getQueuePosition();
        albumPaths = MusicPlayer.getAlbumPathAll();
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        if (toolbar != null) {
            setSupportActionBar(toolbar);
            ab = getSupportActionBar();
            ab.setDisplayHomeAsUpEnabled(true);
            ab.setHomeAsUpIndicator(R.drawable.actionbar_back);
            toolbar.setNavigationOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    onBackPressed();
                }
            });
        }
        albumLayout = (FrameLayout) findViewById(R.id.headerView);
        lrcViewContainer = (RelativeLayout) findViewById(R.id.lrcviewContainer);
        mLrcView = (LrcView) findViewById(R.id.lrcview);
        tryGetLrc = (TextView) findViewById(R.id.tragetlrc);
        musicTool = (LinearLayout) findViewById(R.id.music_tool);

        backAlbum = (ImageView) findViewById(R.id.albumArt);
        playingmode = (ImageView) findViewById(R.id.playing_mode);
        control = (ImageView) findViewById(R.id.playing_play);
        next = (ImageView) findViewById(R.id.playing_next);
        pre = (ImageView) findViewById(R.id.playing_pre);
        playlist = (ImageView) findViewById(R.id.playing_playlist);
        more = (ImageView) findViewById(R.id.playing_more);
        cmt = (ImageView) findViewById(R.id.playing_cmt);
        fav = (ImageView) findViewById(R.id.playing_fav);
        down = (ImageView) findViewById(R.id.playing_down);
        timePlayed = (TextView) findViewById(R.id.music_duration_played);
        duration = (TextView) findViewById(R.id.music_duration);
        mProgress = (PlayerSeekBar) findViewById(R.id.play_seek);
        needle = (ImageView) findViewById(R.id.needle);
        mViewPager = (AlbumViewPager) findViewById(R.id.view_pager);
        //Viewpager 去掉两侧的光晕效果


        mVolumeSeek = (SeekBar) findViewById(R.id.volume_seek);
        mProgress.setIndeterminate(false);
        mProgress.setProgress(1);
        mProgress.setMax(1000);

        mMainAdapter = new  MyMainPagerAdapter();

        loadOther();
        setViewPager();
        initLrcView();
        // setViewPager();
        updateTrackInfoFalse();
        mHandler = HandlerUtil.getInstance(this);
        mHandler.postDelayed(up, 1000);
    }

    private void initLrcView() {
        mLrcView.setOnSeekToListener(onSeekToListener);
        mLrcView.setOnLrcClickListener(onLrcClickListener);
        mViewPager.setOnSingleTouchListener(new AlbumViewPager.OnSingleTouchListener() {
            @Override
            public void onSingleTouch(View v) {
                if (albumLayout.getVisibility() == View.VISIBLE) {
                    albumLayout.setVisibility(View.INVISIBLE);
                    lrcViewContainer.setVisibility(View.VISIBLE);
                    musicTool.setVisibility(View.INVISIBLE);
//                    first = false;
//                    mViewPager.isRotating = false;
                }
            }
        });
        lrcViewContainer.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (lrcViewContainer.getVisibility() == View.VISIBLE) {
                    lrcViewContainer.setVisibility(View.INVISIBLE);
                    albumLayout.setVisibility(View.VISIBLE);
                    musicTool.setVisibility(View.VISIBLE);
                    updateTrackInfo();
                    // interpolator.start();
                }
            }
        });

        tryGetLrc.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent();
                intent.setAction(MediaService.TRY_GET_TRACKINFO);
                sendBroadcast(intent);
                Toast.makeText(getApplicationContext(), "正在获取信息", Toast.LENGTH_SHORT).show();
            }
        });

        final AudioManager audioManager = (AudioManager) getSystemService(AUDIO_SERVICE);
        int v = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
        int mMaxVol = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
        mVolumeSeek.setMax(mMaxVol);
        mVolumeSeek.setProgress(v);
        mVolumeSeek.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, progress, AudioManager.ADJUST_SAME);
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {

            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {

            }
        });
    }


    LrcView.OnLrcClickListener onLrcClickListener = new LrcView.OnLrcClickListener() {

        @Override
        public void onClick() {

            if (lrcViewContainer.getVisibility() == View.VISIBLE) {
                lrcViewContainer.setVisibility(View.INVISIBLE);
                albumLayout.setVisibility(View.VISIBLE);
                musicTool.setVisibility(View.VISIBLE);
            }
        }
    };
    LrcView.OnSeekToListener onSeekToListener = new LrcView.OnSeekToListener() {

        @Override
        public void onSeekTo(int progress) {
            MusicPlayer.seek(progress);

        }
    };


    private List<LrcRow> getLrcRows() {

        List<LrcRow> rows = null;
        InputStream is = null;
        try {
            is = new FileInputStream(Environment.getExternalStorageDirectory().getAbsolutePath() +
                    "/remusic/lrc/" + MusicPlayer.getCurrentAudioId());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } finally {
            if (is == null) {
                return null;
            }
        }
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        String line;
        StringBuilder sb = new StringBuilder();
        try {
            while ((line = br.readLine()) != null) {
                sb.append(line + "\n");
            }
            rows = DefaultLrcParser.getIstance().getLrcRows(sb.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return rows;
    }


    /*唱针当前所处的状态*/
    private enum NeedleAnimatorStatus {
        /*移动时：从唱盘往远处移动*/
        TO_FAR,
        /*移动时：从远处往唱盘移动*/
        TO_NEAR,
        /*静止时：离开唱盘*/
        IN_FAR,
        /*静止时：贴近唱盘*/
        IN_NEAR,

        PLAYING
    }

    boolean isPlaying;

    private void loadOther() {
        needleAnim = ObjectAnimator.ofFloat(needle, "rotation", -25, 0);
        needleAnim.setDuration(300L);
        needleAnim.setRepeatMode(0);
        //needleAnim.setInterpolator(new AccelerateInterpolator());
        needleAnimatorStatus = NeedleAnimatorStatus.IN_FAR;
        needleAnim.addListener(new Animator.AnimatorListener() {
            @Override
            public void onAnimationStart(Animator animator) {
                /**
                 * 根据动画开始前NeedleAnimatorStatus的状态，
                 * 即可得出动画进行时NeedleAnimatorStatus的状态
                 * */
                //  needleAnimatorStatus = NeedleAnimatorStatus.PLAYING;
                if (mViewPager.mScrollState == mViewPager.SCROLL_STATE_IDLE && needleAnimatorStatus == NeedleAnimatorStatus.IN_NEAR
                        && MusicPlayer.isPlaying()) {
                    Log.e("playab", "animacancle");
                    isPlaying = false;
                    if (!mViewPager.isRotating) {
                        mHandler.removeCallbacks(start);
                        mHandler.postDelayed(start, 100);
                        interpolator.reset();
                    }
                }
                isPlaying = true;
                Log.e("playab", "start");
            }

            @Override
            public void onAnimationEnd(Animator animator) {
                Log.e("playab", first + "  first" + " status = " + needleAnimatorStatus);
                isPlaying = false;

                if (needleAnimatorStatus == NeedleAnimatorStatus.IN_FAR) {
                    Log.e("playab", " is infar");
                    needleAnimatorStatus = NeedleAnimatorStatus.IN_NEAR;
                    if (!mViewPager.isRotating) {
                        Log.e("playab", " is not rotating");
                        mHandler.removeCallbacks(start);
                        mHandler.postDelayed(start, 100);
                        interpolator.reset();
                    } else if (!first) {
                        interpolator.start();
                    }
                } else if (needleAnimatorStatus == NeedleAnimatorStatus.IN_NEAR) {
                    Log.e("playab", " is innear");
                    needleAnimatorStatus = NeedleAnimatorStatus.IN_FAR;
                  //  interpolator.pause();
                    first = false;
                }

                if (mIsNeed2StartPlayAnimator) {
                    needleAnim.start();
                    mIsNeed2StartreserveAnimator = false;
                    mIsNeed2StartPlayAnimator = false;
                } else if (mIsNeed2StartreserveAnimator) {
                    needleAnim.reverse();
                    mIsNeed2StartreserveAnimator = false;
                    mIsNeed2StartPlayAnimator = false;
                }

            }

            @Override
            public void onAnimationCancel(Animator animator) {
                Log.e("playab", "cancle");
                isPlaying = false;
            }

            @Override
            public void onAnimationRepeat(Animator animator) {
                Log.e("playab", "rep");
            }
        });

        setSeekBarListener();
        setTools();

        rotateAnimation = new RotateAnimation(0, 360, 1, 0.5F, 1, 0.5F);
        rotateAnimation.setDuration(25000L);
        rotateAnimation.setInterpolator(interpolator);
        rotateAnimation.setRepeatCount(Animation.INFINITE);
        rotateAnimation.setRepeatMode(Animation.INFINITE);
        rotateAnimation.setFillAfter(true);
        rotateAnimation.setFillEnabled(true);


    }

    /*标记唱针复位后，是否需要重新偏移到唱片处*/
    private boolean mIsNeed2StartPlayAnimator = false;
    boolean mIsNeed2StartreserveAnimator = false;

    /*播放动画*/
    private void playAnimator() {
        Log.e("playab", "playAnimator" + " status = " + needleAnimatorStatus + "  isplaying = " + isPlaying);
        /*唱针处于远端时，直接播放动画*/
        if (needleAnimatorStatus == NeedleAnimatorStatus.IN_FAR && !isPlaying) {
            needleAnim.start();
        }
        /*唱针处于往远端移动时，设置标记，等动画结束后再播放动画*/
        else if (needleAnimatorStatus == NeedleAnimatorStatus.TO_FAR) {
            mIsNeed2StartreserveAnimator = false;
            mIsNeed2StartPlayAnimator = true;
        }
    }

    /*暂停动画*/
    private void pauseAnimator() {
        Log.e("playab", "pauseAnimator" + " status = " + needleAnimatorStatus + "  isplaying = " + isPlaying);
        /*播放时暂停动画*/
        if (needleAnimatorStatus == NeedleAnimatorStatus.IN_NEAR && !isPlaying) {
//            int index = mVpContain.getCurrentItem();
            needleAnim.reverse();
            interpolator.pause();
        }
        /*唱针往唱盘移动时暂停动画*/
        else if (needleAnimatorStatus == NeedleAnimatorStatus.TO_NEAR) {
            // needleAnim.reverse();
            mIsNeed2StartreserveAnimator = true;
            mIsNeed2StartPlayAnimator = false;
            interpolator.pause();
            /**
             * 若动画在没结束时执行reverse方法，则不会执行监听器的onStart方法，此时需要手动设置
             * */
        }

    }

    Runnable start = new Runnable() {
        @Override
        public void run() {
            mViewPager.setAnimation(rotateAnimation);
            interpolator.reset();
        }
    };
    NeedleAnimatorStatus needleAnimatorStatus;
    private RotateAnimation rotateAnimation;
    private ReInterpolator interpolator = new ReInterpolator();

    private void setViewPager() {

        mViewPager.setAdapter(mMainAdapter);
        mViewPager.setOffscreenPageLimit(3);
        mViewPager.setOverScrollMode(ViewPager.OVER_SCROLL_NEVER);
        mViewPager.setAnimationChange(new RoundViewPager.OnAnimationChange() {
            @Override
            public void onStart(View view) {
                Log.e("playab", "anim start" + "time = " + System.currentTimeMillis() + first);
                first = true;
                playAnimator();
            }

            @Override
            public void onReStart() {
                Log.e("playab", "onrestart");
                first = false;
                playAnimator();
            }

            @Override
            public void onPause() {
                pauseAnimator();
                first = false;
            }
        });

        mViewPager.addOnPageChangeListener(new AlbumViewPager.OnPageChangeListener() {

            @Override
            public void onPageSelected(final int pPosition) {
                Log.e("playactivity", "pageselected" + "time = " + System.currentTimeMillis());
                if (pPosition < 1) { //首位之前，跳转到末尾（N）
                    MusicPlayer.setQueuePosition(MusicPlayer.getQueue().length);
                    mViewPager.setCurrentItem(MusicPlayer.getQueue().length, false);
                    isNextOrPreSetPage = false;
                    currentId = plays.length - 2;
                    return;

                } else if (pPosition > plays.length) { //末位之后，跳转到首位（1）
                    MusicPlayer.setQueuePosition(0);
                    mViewPager.setCurrentItem(1, false); //false:不显示跳转过程的动画
                    isNextOrPreSetPage = false;
                    currentId = 1;
                    return;
                } else {

//                    if (!isNextOrPreSetPage) {
//                        if (pPosition < currentId + 1) {
//                            HandlerUtil.getInstance(PlayingActivity.this).postDelayed(new Runnable() {
//                                @Override
//                                public void run() {
//                                    MusicPlayer.previous(PlayingActivity.this, true);
//                                }
//                            }, 600);
//
//
//                        } else if (pPosition > currentId + 1) {
//                            currentId++;
//                            mHandler.removeCallbacks(nextplay);
//                            if (needleAnimatorStatus == NeedleAnimatorStatus.IN_FAR) {
//                                needleAnim.start();
//                            } else if (needleAnimatorStatus == NeedleAnimatorStatus.IN_NEAR) {
//                                needleAnim.reverse();
//                            }
//                            mHandler.postDelayed(nextplay, 200);
//
//                        }
//                    }

                    if (pPosition < currentId + 1) {
                        HandlerUtil.getInstance(PlayingActivity.this).postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                MusicPlayer.previous(PlayingActivity.this, true);
                            }
                        }, 600);


                    } else if (pPosition > currentId + 1) {
                        currentId++;
                        mHandler.removeCallbacks(nextplay);
                        if (needleAnimatorStatus == NeedleAnimatorStatus.IN_FAR) {
                            needleAnim.start();
                        } else if (needleAnimatorStatus == NeedleAnimatorStatus.IN_NEAR) {
                            needleAnim.reverse();
                        }
                        mHandler.postDelayed(nextplay, 0);
                       // MusicPlayer.next();

                    }

                }
                isNextOrPreSetPage = false;

            }

            @Override
            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
            }

            @Override
            public void onPageScrollStateChanged(int pState) {
            }
        });
    }

    private void setTools() {
        playingmode.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                MusicPlayer.cycleRepeat();
                updatePlaymode();
            }
        });

        pre.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
               // UiMonitorActivity.launch(PlayingActivity.this);
//                if (currentId == 1) {
//                    currentId = plays.length - 1;
//                } else {
//                    currentId--;
//                }
//
//                updateTrackInfoFalse();
//                mHandler.removeCallbacks(nextplay);
//                if (needleAnimatorStatus == NeedleAnimatorStatus.IN_FAR) {
//                    needleAnim.start();
//                } else if (needleAnimatorStatus == NeedleAnimatorStatus.IN_NEAR) {
//                    needleAnim.reverse();
//                }
//                mHandler.postDelayed(nextplay, 200);
                mViewPager.setCurrentItem(currentId , true);
            }
        });

        control.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                duetoplaypause = true;


                if (MusicPlayer.isPlaying()) {
                    control.setImageResource(R.drawable.play_rdi_btn_pause);
                } else {
                    control.setImageResource(R.drawable.play_rdi_btn_play);
                }
                if (MusicPlayer.getQueueSize() != 0) {
                    MusicPlayer.playOrPause();
                }
            }
        });

        next.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

//                if (currentId == plays.length - 1) {
//                    currentId = 1;
//                } else {
//                    currentId++;
//                }
//
//                updateTrackInfoFalse();
//                mHandler.removeCallbacks(nextplay);
//                if (needleAnimatorStatus == NeedleAnimatorStatus.IN_FAR) {
//                    needleAnim.start();
//                } else if (needleAnimatorStatus == NeedleAnimatorStatus.IN_NEAR) {
//                    needleAnim.reverse();
//                }
              //  mHandler.postDelayed(nextplay, 200);

                Log.e("playing","currentid = " + currentId + "   c = " + mViewPager.getCurrentItem());
                mViewPager.setCurrentItem(currentId + 2 ,true );


            }
        });

        playlist.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                PlayQueueFragment playQueueFragment = new PlayQueueFragment();
                playQueueFragment.show(getSupportFragmentManager(), "playlistframent");
            }
        });

        more.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                SimpleMoreFragment moreFragment = SimpleMoreFragment.newInstance(MusicPlayer.getCurrentAudioId());
                moreFragment.show(getSupportFragmentManager(), "music");
            }
        });

        fav.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {

                if (isFav) {
                    playlistsManager.removeItem(PlayingActivity.this, IConstants.FAV_PLAYLIST,
                            MusicPlayer.getCurrentAudioId());
                    fav.setImageResource(R.drawable.play_rdi_icn_love);
                    isFav = false;
                } else {
                    try {
                        MusicInfo info = MusicPlayer.getPlayinfos().get(MusicPlayer.getCurrentAudioId());
                        playlistsManager.insertMusic(PlayingActivity.this, IConstants.FAV_PLAYLIST, info);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    fav.setImageResource(R.drawable.play_icn_loved);
                    isFav = true;
                }

                Intent intent = new Intent(IConstants.PLAYLIST_COUNT_CHANGED);
                sendBroadcast(intent);
            }
        });


    }

    Runnable nextplay = new Runnable() {
        @Override
        public void run() {
            // MusicPlayer.setQueuePosition(currentId);
            Intent intent = new Intent(MediaService.SETQUEUE);
            intent.setPackage("com.wm.remusic");
            intent.putExtra("position", currentId);
            sendBroadcast(intent);
        }
    };

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // handle item selection
        if (item.getItemId() == R.id.menu_share) {
            MusicInfo musicInfo = MusicUtils.getMusicInfo(PlayingActivity.this, MusicPlayer.getCurrentAudioId());
            Intent shareIntent = new Intent();
            shareIntent.setAction(Intent.ACTION_SEND);
            shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.parse("file://" + musicInfo.data));
            shareIntent.setType("audio/*");
            this.startActivity(Intent.createChooser(shareIntent, getResources().getString(R.string.shared_to)));

        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.playing_menu, menu);
        return true;

    }

    private void updatePlaymode() {
        if (MusicPlayer.getShuffleMode() == MediaService.SHUFFLE_NORMAL) {
            playingmode.setImageResource(R.drawable.play_icn_shuffle);
            Toast.makeText(PlayingActivity.this.getApplication(), getResources().getString(R.string.random_play),
                    Toast.LENGTH_SHORT).show();
        } else {
            switch (MusicPlayer.getRepeatMode()) {
                case MediaService.REPEAT_ALL:
                    playingmode.setImageResource(R.drawable.play_icn_loop);
                    Toast.makeText(PlayingActivity.this.getApplication(), getResources().getString(R.string.loop_play),
                            Toast.LENGTH_SHORT).show();
                    break;
                case MediaService.REPEAT_CURRENT:
                    playingmode.setImageResource(R.drawable.play_icn_one);
                    Toast.makeText(PlayingActivity.this.getApplication(), getResources().getString(R.string.play_one),
                            Toast.LENGTH_SHORT).show();
                    break;
            }
        }

    }

    @Override
    protected void onStart() {
        super.onStart();
        //设置ViewPager的默认项
        mViewPager.setCurrentItem(MusicPlayer.getQueuePosition() + 1);
    }

    @Override
    public void onResume() {
        super.onResume();
        if(MusicPlayer.isTrackLocal())
        updateBuffer(100);
        else {
            updateBuffer(MusicPlayer.secondPosition());
        }

        musicInfos = MusicPlayer.getPlayinfos();
        plays = MusicPlayer.getQueue();
        currentId = MusicPlayer.getQueuePosition();
        albumPaths = MusicPlayer.getAlbumPathAll();
    }

    boolean isFirst = true;
    public void updateQueue() {
        if (MusicPlayer.getQueueSize() == 0) {
            MusicPlayer.stop();
            finish();
        }
        if(isFirst){
            isFirst = false;
            return;
        }


        Log.e("uqueue","update");
        int id = MusicPlayer.getQueuePosition();
        plays = MusicPlayer.getQueue();
        albumPaths = MusicPlayer.getAlbumPathAll();
        musicInfos = MusicPlayer.getPlayinfos();
        Log.e("uqueue","album = " + albumPaths.length + "music = " + musicInfos.size());
        currentId = id;
        mMainAdapter.notifyDataSetChanged();
        mViewPager.setCurrentItem(currentId + 1, true);
        updateTrack();
        updateTrackInfoFalse();



        Log.e("uqueue","id = " + id + "    currentid = " + currentId);

    }

    private void updateFav(boolean b) {
        if (b) {
            fav.setImageResource(R.drawable.play_icn_loved);
        } else {
            fav.setImageResource(R.drawable.play_rdi_icn_love);
        }
    }

    public void updateLrc() {
        List<LrcRow> list = getLrcRows();
        if (list != null && list.size() > 0) {
            tryGetLrc.setVisibility(View.INVISIBLE);
            mLrcView.setLrcRows(list);
        } else {
            tryGetLrc.setVisibility(View.VISIBLE);
            mLrcView.reset();
        }
    }

    public void updateTrack() {
        Log.e("updatetr","updatetrack");
        mHandler.removeCallbacks(up);
        mHandler.postDelayed(up, 1000);
    }

    private Runnable up = new Runnable() {
        @Override
        public void run() {
            new setBlurredAlbumArt().execute();
        }
    };

    boolean first = true;

    public void updateTrackInfo() {
        Log.e("uqu","uptrackinfo");
        int id = MusicPlayer.getQueuePosition();
        Log.e("uqu","uptrackinfo" + id  + "   " + currentId);

        if(currentId != id){
            Log.e("plc","not currtnt");
            currentId = id;
            updateTrackInfoFalse();
        }

        if (MusicPlayer.isPlaying()) {
            control.setImageResource(R.drawable.play_rdi_btn_pause);
            playAnimator();
            mProgress.removeCallbacks(mUpdateProgress);
            mProgress.postDelayed(mUpdateProgress, 100);
        } else {
            control.setImageResource(R.drawable.play_rdi_btn_play);
            pauseAnimator();
            mProgress.removeCallbacks(mUpdateProgress);
        }

        duration.setText(MusicUtils.makeTimeString(MusicPlayer.duration()));

    }

    public void updateTrackInfoFalse() {

        if (MusicPlayer.getQueueSize() == 0) {
            return;
        }


        MusicInfo info = musicInfos.get(plays[currentId]);

        Log.e("uqu","musicinfos = " + plays.length + "  " + plays[currentId] + "   currentid = " + currentId);
        Log.e("uqu","musicinfos = " + plays);
        ab.setTitle(info.musicName);
        ab.setSubtitle(info.artist);
        isNextOrPreSetPage = false;
//        if (currentId + 1 != mViewPager.getCurrentItem()) {
//            mViewPager.setCurrentItem(currentId + 1, true);
//            isNextOrPreSetPage = true;
//        }

    }


    @Override
    public void updateBuffer(int p) {
        Log.e("progr","p = " + p);
        mProgress.setSecondaryProgress(p*10);
    }

    @Override
    public void loading(boolean l) {
        mProgress.setLoading(l);
    }

    private Runnable mUpdateProgress = new Runnable() {

        @Override
        public void run() {

            if (mProgress != null) {
                long position = MusicPlayer.position();
                long duration = MusicPlayer.duration();
                                             //   216000000
                if (duration > 0 && duration < 627080716){
                    Log.e("durate","position = " + position + "  , duration = " + duration);
                    mProgress.setProgress((int) (1000 * position / duration));
                    timePlayed.setText(MusicUtils.makeTimeString( position ));
                }
                mProgress.postDelayed(mUpdateProgress, 300);
            }
        }
    };

    private void setSeekBarListener() {

        if (mProgress != null)
            mProgress.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
                @Override
                public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                    i = (int) (i * MusicPlayer.duration() / 1000);
                    mLrcView.seekTo(i, true, b);
                    if (b) {
                        MusicPlayer.seek((long)i);
                        timePlayed.setText(MusicUtils.makeTimeString( i ));
                    }
                }

                @Override
                public void onStartTrackingTouch(SeekBar seekBar) {
                }

                @Override
                public void onStopTrackingTouch(SeekBar seekBar) {
                }
            });
    }


    @Override
    public void onPause() {
        super.onPause();
    }

    @Override
    public void onStop() {
        super.onStop();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        mProgress.removeCallbacks(mUpdateProgress);
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        mProgress.removeCallbacks(mUpdateProgress);
    }


    private Bitmap mBitmap;

    private class setBlurredAlbumArt extends AsyncTask<Void, Void, Drawable> {
        long albumid = MusicPlayer.getCurrentAlbumId();

        @Override
        protected Drawable doInBackground(Void... loadedImage) {

            Drawable drawable = null;
            mBitmap = null;
            if (newOpts == null) {
                newOpts = new BitmapFactory.Options();
                newOpts.inSampleSize = 6;
                newOpts.inPreferredConfig = Bitmap.Config.RGB_565;
            }
            if (!MusicPlayer.isTrackLocal()) {
                L.D(print, TAG, "music is net");
                if (getAlbumPath() == null) {
                    L.D(print, TAG, "getalbumpath is null");
                    mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.placeholder_disk_210);
                    drawable = ImageUtils.createBlurredImageFromBitmap(mBitmap, PlayingActivity.this.getApplication(), 3);
                    return drawable;
                }
                ImageRequest imageRequest = ImageRequestBuilder
                        .newBuilderWithSource(Uri.parse(getAlbumPath()))
                        .setProgressiveRenderingEnabled(true)
                        .build();

                ImagePipeline imagePipeline = Fresco.getImagePipeline();
                DataSource<CloseableReference<CloseableImage>>
                        dataSource = imagePipeline.fetchDecodedImage(imageRequest, PlayingActivity.this);

                dataSource.subscribe(new BaseBitmapDataSubscriber() {
                                         @Override
                                         public void onNewResultImpl(@Nullable Bitmap bitmap) {
                                             // You can use the bitmap in only limited ways
                                             // No need to do any cleanup.
                                             if (bitmap != null) {
                                                 mBitmap = bitmap;
                                                 L.D(print, TAG, "getalbumpath bitmap success");
                                             }
                                         }

                                         @Override
                                         public void onFailureImpl(DataSource dataSource) {
                                             // No cleanup required here.
                                             L.D(print, TAG, "getalbumpath bitmap failed");
                                             mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.placeholder_disk_210);

                                         }
                                     },
                        CallerThreadExecutor.getInstance());
                if (mBitmap != null) {
                    drawable = ImageUtils.createBlurredImageFromBitmap(mBitmap, PlayingActivity.this.getApplication(), 3);
                }

            } else {
                try {
                    mBitmap = null;
                    Bitmap bitmap = null;
                    Uri art = Uri.parse(getAlbumPath());
                    L.D(print, TAG, "album is local ");
                    if (art != null) {
                        ParcelFileDescriptor fd = null;
                        try {
                            fd = getContentResolver().openFileDescriptor(art, "r");
                        } catch (FileNotFoundException e) {
                            e.printStackTrace();
                        }
                        if (fd != null) {
                            bitmap = BitmapFactory.decodeFileDescriptor(fd.getFileDescriptor(), null, newOpts);
                        } else {
                            bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.placeholder_disk_210, newOpts);
                        }
                    } else {
                        bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.placeholder_disk_210, newOpts);
                    }
                    if (bitmap != null) {
                        drawable = ImageUtils.createBlurredImageFromBitmap(bitmap, PlayingActivity.this.getApplication(), 3);
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            return drawable;
        }

        @Override
        protected void onPostExecute(Drawable result) {

            if (albumid != MusicPlayer.getCurrentAlbumId()) {
                this.cancel(true);
                return;
            }
            setDrawable(result);

        }

    }

    private void setDrawable(Drawable result) {
        if (result != null) {
            if (backAlbum.getDrawable() != null) {
                final TransitionDrawable td =
                        new TransitionDrawable(new Drawable[]{backAlbum.getDrawable(), result});


                backAlbum.setImageDrawable(td);
                //去除过度绘制
                td.setCrossFadeEnabled(true);
                td.startTransition(200);

            } else {
                backAlbum.setImageDrawable(result);
            }
        }
    }

    public class MyMainPagerAdapter extends PagerAdapter {

        private int mChildCount = 0;
        @Override
        public Object instantiateItem(ViewGroup container, int position) {

            if (position == plays.length + 1 || position == 0) {
                return new View(PlayingActivity.this);
            }
            RoundView view = RoundView.getView(PlayingActivity.this, albumPaths[position - 1]);
            container.addView(view);
            return view;

        }

        @Override
        public void destroyItem(ViewGroup container, int position, Object object) {
            container.removeView((View) object);
        }

        @Override
        public int getCount() {
            return plays.length + 2;
        }

        @Override
        public boolean isViewFromObject(View arg0, Object arg1) {
            return arg0 == arg1;
        }

        @Override
        public void notifyDataSetChanged() {
            mChildCount = getCount();
            super.notifyDataSetChanged();
        }

        @Override
        public int getItemPosition(Object object) {
            if (mChildCount > 0) {
                mChildCount--;
                return POSITION_NONE;
            }
            return super.getItemPosition(object);
        }

    }


}
